
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model User {
  id             String               @id
  name           String
  email          String               @unique
  emailVerified  Boolean
  image          String?
  role           UserRole             @default(USER)
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @default(now()) @updatedAt
  favoriteMovies UserFavoriteMovies[]
  accounts       Account[]
  analytics      AnalyticsUser[]
  sessions       Session[]

  @@map("user")
}

model Movie {
  id             String               @id @default(cuid())
  title          String
  image          String
  idGoogleDive   String?              @unique
  tags           String[]
  link           String               @unique
  releaseDate    String?
  year           Int?
  country        String?
  synopsis       String?
  trailer        String?
  duration       Int?
  createdAt      DateTime             @default(now())
  originalTitle  String?
  language       String?
  subtitles      String[]
  titleEnglish   String?
  titleJapanese  String?
  director       String?
  imdbId         String?
  publish        Boolean              @default(true)
  updatedAt      DateTime             @updatedAt
  genresIds      MovieGenre[]
  favoriteMovies UserFavoriteMovies[]
}

model UserFavoriteMovies {
  id      Int    @id @default(autoincrement())
  userId  String
  movieId String
  movie   Movie  @relation(fields: [movieId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, movieId])
}

model AuthorizedEmail {
  id    String  @id @default(cuid())
  email String? @unique
}

model DirectorSection {
  id            String  @id @default(cuid())
  director      String
  imageBackdrop String?
}

model Genre {
  id     String       @id @default(cuid())
  nameFR String       @unique
  nameEN String       @unique
  nameJP String       @unique
  movies MovieGenre[]
}

model MovieGenre {
  id      String @id @default(cuid())
  movieId String
  genreId String
  genre   Genre  @relation(fields: [genreId], references: [id], onDelete: Cascade)
  movie   Movie  @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@unique([movieId, genreId])
}

model AnalyticsUser {
  id               String   @id @default(cuid())
  userId           String
  lastLogin        DateTime @default(now())
  lastMovieWatched String?
  visits           Int      @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id])

  @@map("analytics_user")
}

model AnalyticsApplication {
  id        String   @id @default(cuid())
  visits    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("analytics_application")
}

enum UserRole {
  USER
  ADMIN
}
