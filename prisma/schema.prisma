// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
  //output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
 // shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  
  refresh_token_expires_in Int?
  access_token       String?  
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          UserRole     @default(USER) 
  favoriteMovies UserFavoriteMovies[]
}

model Movie {
  id       String    @id @default(cuid())
  title    String 
  originalTitle String?
  image    String
  duration Int?
  idGoogleDive String?     @unique
  tags       String[]
  link     String     @unique
  releaseDate String?
  language  String?
  subtitles  String[]
  year     Int?
  genre    String[]
  country  String?
  synopsis  String?
  trailer  String?
  favoriteMovies UserFavoriteMovies[]
  createdAt DateTime @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserFavoriteMovies {
  id        Int     @id @default(autoincrement())
  userId    String
  movieId   String

  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  movie     Movie   @relation(fields: [movieId], references: [id], onDelete: Cascade)  

  @@unique([userId, movieId])
}

model AuthorizedEmail {
  id            String    @id @default(cuid())
  email         String?   @unique
}

enum UserRole {
  USER
  ADMIN
}
