// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"

  output = "../app/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  // shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String               @id @default(cuid())
  name           String?
  email          String?              @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  role           UserRole             @default(USER)
  favoriteMovies UserFavoriteMovies[]
}

model Movie {
  id             String               @id @default(cuid())
  title          String
  originalTitle  String?
  titleJapanese  String?
  titleEnglish   String?
  image          String
  duration       Int?
  idGoogleDive   String?              @unique
  tags           String[]
  link           String               @unique
  releaseDate    String?
  language       String?
  subtitles      String[]
  year           Int?
  genresIds      MovieGenre[]
  country        String?
  synopsis       String?
  trailer        String?
  director       String?
  imdbId         String?
  publish        Boolean              @default(true)
  favoriteMovies UserFavoriteMovies[]
  createdAt      DateTime             @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserFavoriteMovies {
  id      Int    @id @default(autoincrement())
  userId  String
  movieId String

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  movie Movie @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@unique([userId, movieId])
}

model AuthorizedEmail {
  id    String  @id @default(cuid())
  email String? @unique
}

model DirectorSection {
  id            String  @id @default(cuid())
  director      String
  imageBackdrop String?
}

model Genre {
  id     String       @id @default(cuid())
  nameFR String       @unique
  nameEN String       @unique
  nameJP String       @unique
  movies MovieGenre[]
}

model MovieGenre {
  id      String @id @default(cuid())
  movie   Movie  @relation(fields: [movieId], references: [id], onDelete: Cascade)
  movieId String
  genre   Genre  @relation(fields: [genreId], references: [id], onDelete: Cascade)
  genreId String

  @@unique([movieId, genreId])
}

enum UserRole {
  USER
  ADMIN
}
